/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package me.mastermind.NXJ_pc;

import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 *
 * @author alex
 */
public class GUI extends JFrame {

    private int lastKeyPressed = 0;
    
    private class MyDispatcher implements KeyEventDispatcher {
        @Override
        public boolean dispatchKeyEvent(KeyEvent e) {
            if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                RemoteController.kill();
                System.exit(0);
            } else if (e.getID() == KeyEvent.KEY_PRESSED) {
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_UP:
                        if (lastKeyPressed != KeyEvent.VK_UP) {
                            statusLabel.setText("Status: Forward");
                            RemoteController.write(20);
                            lastKeyPressed = KeyEvent.VK_UP;
                        }
                        break;
                    case KeyEvent.VK_DOWN:
                        if (lastKeyPressed != KeyEvent.VK_DOWN) {
                            statusLabel.setText("Status: Backward");
                            RemoteController.write(10);
                            lastKeyPressed = KeyEvent.VK_DOWN;
                        }
                        break;
                    case KeyEvent.VK_PLUS:
                        statusLabel.setText("Status: Speed+");
                        RemoteController.write(40);
                        lastKeyPressed = KeyEvent.VK_PLUS;
                        break;
                    case KeyEvent.VK_MINUS:
                        statusLabel.setText("Status: Speed-");
                        RemoteController.write(30);
                        lastKeyPressed = KeyEvent.VK_MINUS;
                        break;
                    default:
                        lastKeyPressed = 0;
                        break;
                }
            } else if (e.getID() == KeyEvent.KEY_RELEASED) {
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_UP:
                    case KeyEvent.VK_DOWN:
                    case KeyEvent.VK_PLUS:
                    case KeyEvent.VK_MINUS:
                        statusLabel.setText("Status: Stop");
                        RemoteController.write(0);
                        lastKeyPressed = 0;
                        break;
                    default:
                        lastKeyPressed = 0;
                        break;
                }
            }
            return false;
        }
    }
    
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        manager.addKeyEventDispatcher(new MyDispatcher());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        statusLabel.setText("Satus: Waiting...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        if (!RemoteController.initalize()) {
            System.exit(1);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame gui = new GUI();
                gui.setVisible(true);
                gui.setResizable(false);
                gui.addWindowListener(new WindowAdapter(){
                    public void windowClosing(WindowEvent e) {
                        RemoteController.kill();
                        System.exit(0);
                    }
                });
            }
        });
    }
    
    public void setStatusLabel(String text) {
        statusLabel.setText(text);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables
}
